services:
    app:
        env_file: "./.env"
        build:
            context: .
            dockerfile: Dockerfile
        container_name: hfs_app
        restart: unless-stopped
        volumes:
            - .:/usr/local/www/hfs_app
        ports:
            - "${PORT}:${PORT}"
        networks:
            - app-network
        command: gunicorn config.wsgi:application --bind 0.0.0.0:${PORT} --workers 2 -t 300

        depends_on:
            - db
            - redis

    db:
        image: postgres:17
        container_name: hfs_db
        restart: unless-stopped
        volumes:
            - ./data/db:/var/lib/postgresql/data
        environment:
            - POSTGRES_USER=${DB_USERNAME}
            - POSTGRES_PASSWORD=${DB_PASSWORD}
            - POSTGRES_DB=${DB_DATABASE}
        ports:
            - "${DB_PORT}:5432"
        networks:
            - app-network
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U ${DB_USERNAME}" ]
            interval: 10s
            timeout: 5s
            retries: 5

    redis:
        build:
          context: ./docker/redis
        container_name: hfs_redis
        restart: always
        volumes:
            - ./data/redis:/data
        ports:
            - "${REDIS_PORT}:6379"
        networks:
            - app-network
        healthcheck:
            test: [ "CMD", "redis-cli", "ping" ]
            interval: 30s
            timeout: 10s
            retries: 5


  ### NGINX Server ###
    nginx:
        build:
            context: ./docker/nginx
        container_name: hfs_nginx
        restart: always
        ports:
            - "80:80"
            - "443:443"
        depends_on:
            - app
        volumes:
            - ./docker/certbot/certs/:/etc/letsencrypt:ro
            - ./docker/certbot/www/:/var/www/certbot:ro
            - ./static/:/usr/local/www/hfs_app/static
            - ./media/:/usr/local/www/hfs_app/media
        networks:
            - app-network

    certbot:
        image: certbot/certbot:latest
        container_name: hfs_certbot
        volumes:
            - ./docker/certbot/certs/:/etc/letsencrypt/:rw
            - ./docker/certbot/www/:/var/www/certbot/:rw
        #    entrypoint: /bin/sh -c "trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done"
        command:
          - certonly certonly
          - -v
          - --agree-tos
          - --no-eff-email
          - --renew-by-default
          - --webroot
          - -w /var/www/certbot/
          - --email ${EMAIL_FROM_ADDRESS:-stanimirdim92@gmail.com}
          - --text
          - --preferred-challenges http-01
          - --server https://acme-v02.api.letsencrypt.org/directory
          - -d ${APP_DOMAIN}
        networks:
            - app-network
        depends_on:
            -   nginx

networks:
    app-network:
        driver: bridge

#volumes:
#    data_db:
#        driver: local
#    data_redis:
#        driver: local

# docker compose up --build
# docker compose run --rm  certbot certonly --webroot --webroot-path /var/www/certbot/ -d api.ai.smartico.one
