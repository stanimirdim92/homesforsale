[tool.mypy]
python_version = "3.12"
#mypy_path = ["fixtures/stubs-for-mypy"]  #https://github.com/getsentry/sentry/tree/master/fixtures/stubs-for-mypy
plugins = [
    "mypy_drf_plugin.main",
    "mypy_django_plugin.main",
]
files = ["."]
include = ["^venv/", "^.venv/"]

# minimal strictness settings
check_untyped_defs = true
disallow_untyped_defs = true
no_implicit_reexport = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true
warn_redundant_casts = true
enable_error_code = ["ignore-without-code", "redundant-self"]


[tool.django-stubs]
django_settings_module = "homesforsale.config.settings.production"

[tool.poetry]
name = "homesforsale"
homepage = "https://github.com/stanimirdim92/homesforsale"
#documentation = ""
keywords = []
version = "0.1.0"
description = ""
authors = ["stanimirdim92 <stanimirdim92@gmail.com>"]
license = "Apache-2.0"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
amqp = "^5.2.0"
argon2-cffi = "^23.1.0"
argon2-cffi-bindings = "^21.2.0"
asgiref = "^3.8.1"
async-timeout = "^4.0.3"
asyncio = "^3.4.3"
attrs = "^24.2.0"
billiard = "^4.2.0"
celery = "^5.5.0b3"
certifi = "^2024.8.30"
cffi = "^1.17.1"
charset-normalizer = "^3.3.2"
click = "^8.1.7"
click-didyoumean = "^0.3.1"
click-plugins = "^1.1.1"
click-repl = "^0.3.0"
cryptography = "^43.0.1"
defusedxml = "^0.8.0rc2"
django = "^5.1.1"
django-appconf = "^1.0.6"
django-cors-headers = "^4.4.0"
django-extensions = "^3.2.3"
django-filter = "^24.3"
django-phonenumber-field = "^8.0.0"
django-redis = "^5.4.0"
django-rosetta = "^0.10.0"
djangorestframework = "^3.15.2"
drf-extensions = "^0.7.1"
drf-spectacular = "^0.27.2"
drf-spectacular-sidecar = "^2024.7.1"
exceptiongroup = "^1.2.2"
fido2 = "^1.1.3"
hiredis = "^3.0.0"
idna = "^3.8"
importlib-metadata = "^8.4.0"
importlib-resources = "^6.4.5"
inflection = "^0.5.1"
jsonschema = "^4.23.0"
jsonschema-specifications = "^2023.12.1"
jwcrypto = "^1.5.6"
lxml = "^5.3.0"
lz4 = "^4.3.3"
markdown = "^3.7"
oauthlib = "^3.2.2"
packaging = "^24.1"
phonenumbers = "^8.13.45"
pkgutil-resolve-name = "^1.3.10"
platformdirs = "^4.3.2"
polib = "^1.2.0"
prompt-toolkit = "^3.0.47"
psycopg = "^3.2.1"
psycopg-binary = "^3.2.1"
psycopg-pool = "^3.2.2"
pyjwt = "^2.9.0"
pyrsistent = "^0.20.0"
python-dateutil = "^2.9.0.post0"
python-dotenv = "^1.0.1"
python3-openid = "^3.2.0"
pytz = "^2024.1"
pyyaml = "^6.0.2"
redis = "^5.1.0b7"
referencing = "^0.35.1"
requests-oauthlib = "^2.0.0"
rpds-py = "^0.20.0"
setuptools = "^75"
six = "^1.16.0"
sqlparse = "^0.5.1"
uritemplate = "^4.1.1"
urllib3 = "^2.2"
uuid = "^1.30"
vine = "^5.1.0"
wcwidth = "^0.2.13"
zipp = "^3.20.1"
whitenoise = "^6.7.0"
django-allauth = "^65.0.1"
pycountries = "^1.2.1"
django-stubs-ext = "^5.1.0"
django-robots = "^6.1"
httpx = "^0.27.2"
django-split-settings = "^1.3.2"
gunicorn = "^23.0.0"
uvicorn = "^0.31.0"
requests = "^2.32.3"

[tool.poetry.group.dev.dependencies]
tox = "^4.20.0"
djangorestframework-stubs = { extras = ["compatible-mypy"], version = "^3.15.1" }
faker = "^28.4.1"
werkzeug = "^3.0.4"
ruff = "^0.6.8"
django-debug-toolbar = "^5.0.0a0"
mccabe = "^0.7.0"
mypy-extensions = "^1.0.0"
pathspec = "^0.12.1"
pluggy = "^1.5.0"
pycodestyle = "^2.12.1"
pyflakes = "^3.2.0"
pytest = "^8.3.3"
pytest-django = "^4.9.0"
pytest-xdist = "^3.6.1"
rcssmin = "^1.1.2"
rjsmin = "^1.2.2"
tokenize-rt = "^6.0.0"
tomli = "^2.0.1"
iniconfig = "^2.0.0"
execnet = "^2.1.1"
mypy = "^1.11.2"
django-upgrade = "^1.21.0"
django-stubs = { extras = ["compatible-mypy"], version = "^5.0.4" }
django-sslserver = "^0.22"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py312"
line-length = 110
indent-width = 4

extend-exclude = [
  ".ruff_cache",
  ".env",
  ".venv",
  "**migrations/**",
]

[tool.ruff.lint]
extend-select = [
    "ASYNC", # https://docs.astral.sh/ruff/rules/#flake8-async-async
    "E", # https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
    "W", #https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
    "F", #https://docs.astral.sh/ruff/rules/#pyflakes-f
    "C",  # https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "D",  # https://docs.astral.sh/ruff/rules/#pydocstyle-d
    "I", # https://docs.astral.sh/ruff/rules/#isort-i
    "ISC", #https://docs.astral.sh/ruff/rules/#flake8-implicit-str-concat-isc
    "TCH", #https://docs.astral.sh/ruff/rules/#flake8-type-checking-tch
    "TID25", #https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "PIE", #https://docs.astral.sh/ruff/rules/#flake8-pie-pie
    "PT", #https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt
    "T20", #https://docs.astral.sh/ruff/rules/#flake8-print-t20
    "UP",  # https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "PL", #https://docs.astral.sh/ruff/rules/#pylint-pl
    "RUF006", # Checks for asyncio dangling task https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
    "RUF015", # Checks for unnecessary iterable allocation for first element
    "RUF019", # Checks for unnecessary key check
    "RUF100", # Unused noqa (auto-fixable)
    "B007", # Checks for unused variables in the loop
    "B019", # Use of functools.lru_cache or functools.cache on methods can lead to memory leaks
    "B028", # No explicit stacklevel keyword argument found
    "B004", # Checks for use of hasattr(x, "__call__") and replaces it with callable(x)
]
ignore = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D202",
    "D203",
    "D205",
    "D206",
    "D213",
    "D407",
    "PT019"
]

[tool.ruff.lint.isort]
combine-as-imports = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = 80

[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"
# Ban certain modules from being imported at module level, instead requiring
# that they're imported lazily (e.g., within a function definition).
banned-module-level-imports = ["numpy", "pandas"]
