# Generated by Django 5.1.1 on 2024-09-11 19:24

import django.core.validators
import django.db.models.deletion
import phonenumber_field.modelfields
import users.enums
import users.managers
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        db_index=True,
                        error_messages={
                            "unique": "A user with that email already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.core.validators.EmailValidator()],
                        verbose_name="email",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Mr", "MR"),
                            ("Mrs", "MRS"),
                            ("Miss", "MISS"),
                            ("Ms", "MS"),
                            ("Dr", "DR"),
                            ("Prof", "PROF"),
                            ("Sir", "SIR"),
                        ],
                        default=users.enums.Titles["MR"],
                        max_length=10,
                        null=True,
                        verbose_name="title",
                    ),
                ),
                (
                    "name_first",
                    models.CharField(
                        max_length=128, null=True, verbose_name="first name"
                    ),
                ),
                (
                    "name_middle",
                    models.CharField(
                        blank=True,
                        max_length=128,
                        null=True,
                        verbose_name="middle name",
                    ),
                ),
                (
                    "name_last",
                    models.CharField(
                        blank=True, max_length=128, null=True, verbose_name="last name"
                    ),
                ),
                (
                    "company_name",
                    models.CharField(
                        blank=True,
                        max_length=128,
                        null=True,
                        verbose_name="company name",
                    ),
                ),
                (
                    "company_vat_number",
                    models.CharField(
                        blank=True, max_length=128, null=True, verbose_name="vat number"
                    ),
                ),
                (
                    "phone_number",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True, default=None, max_length=128, null=True, region=None
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        null=True,
                        unique=True,
                        verbose_name="uuid",
                    ),
                ),
                (
                    "time_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "time_modified",
                    models.DateTimeField(auto_now=True, verbose_name="modified at"),
                ),
                (
                    "time_deleted",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="deleted at"
                    ),
                ),
                (
                    "reference",
                    models.CharField(
                        default=None,
                        max_length=128,
                        unique=True,
                        verbose_name="reference",
                    ),
                ),
                (
                    "reference_external",
                    models.CharField(
                        blank=True,
                        max_length=128,
                        null=True,
                        verbose_name="reference external",
                    ),
                ),
                (
                    "entity_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("CLIENT", "CLIENT"),
                            ("AGENCY", "AGENCY"),
                            ("AGENT", "AGENT"),
                            ("ORGANIZATION", "ORGANIZATION"),
                        ],
                        default=users.enums.Types["CLIENT"],
                        max_length=128,
                        null=True,
                        verbose_name="type",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "ordering": ["-id"],
            },
            managers=[
                ("objects", users.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Address",
            fields=[
                ("address_line_1", models.CharField(max_length=255)),
                (
                    "address_line_2",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("city", models.CharField(max_length=100)),
                ("state", models.CharField(max_length=100)),
                ("postal_code", models.CharField(max_length=20)),
                ("country", models.CharField(max_length=100)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                        verbose_name="id",
                    ),
                ),
                (
                    "time_created",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "time_modified",
                    models.DateTimeField(auto_now=True, verbose_name="modified at"),
                ),
                (
                    "time_deleted",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="deleted at"
                    ),
                ),
                (
                    "user_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="addresses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]
